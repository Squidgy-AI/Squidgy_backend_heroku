#!/usr/bin/env python3
"""
üöÄ COMPLETE FACEBOOK PAGES VIEWER - ONE SCRIPT DOES EVERYTHING
üéØ For Business Users - Zero Technical Knowledge Required

WHAT THIS SCRIPT DOES:
=====================
1. üîí Opens fresh incognito browser (no stored login data)
2. üîê Auto-fills your GoHighLevel credentials  
3. üì± Handles MFA approval (you approve on mobile if needed)
4. üîç Extracts JWT access token automatically in background
5. üì° Tests all Facebook API endpoints with detailed logging
6. üìÑ Shows you ALL your Facebook pages with complete details
7. üîó Shows what's currently connected to GHL
8. üìã Attempts to attach/connect any unconnected pages
9. üìä Provides comprehensive analysis and business summary

HOW TO RUN:
==========
1. FIRST - UPDATE YOUR CREDENTIALS in this script:
   - Open this file in a text editor
   - Find the __init__ method (around line 110)
   - Replace 'YOUR_EMAIL@example.com' with your GHL email
   - Replace 'YOUR_PASSWORD_HERE' with your GHL password
   - Replace 'YOUR_LOCATION_ID_HERE' with your GHL location ID
   
   How to find your Location ID:
   - Login to GoHighLevel
   - Look at the URL: app.gohighlevel.com/location/YOUR_LOCATION_ID/dashboard
   - Copy the location ID from the URL

2. Install dependencies:
   pip install playwright httpx asyncio

3. Install Playwright browsers (one time setup):
   playwright install

4. Run the script:
   python complete_facebook_viewer.py

5. The script will:
   - Start automatically after 3 seconds
   - Open an incognito browser window
   - Auto-fill your credentials
   - Handle login and MFA (approve on mobile if prompted)
   - Extract JWT token and test all Facebook endpoints
   - Show detailed results and analysis

WHAT YOU'LL SEE:
===============
‚úÖ Step-by-step login process with status updates
‚úÖ JWT token extraction and analysis  
‚úÖ Detailed Facebook connection status
‚úÖ Complete list of your Facebook pages with all details
‚úÖ What pages are connected to GHL
‚úÖ Automatic attempt to connect unconnected pages
‚úÖ Business-friendly summary of your Facebook integration

BUSINESS VALUE:
==============
üéØ Know exactly which Facebook pages you have
üìä See which pages are connected to GHL for marketing
üîç Verify your Facebook integration is working properly
üíº No technical knowledge required - just run and see results
üöÄ Complete automation - one click shows everything

TECHNICAL DETAILS:
=================
- Uses fresh incognito browser session every time
- Automatically handles GoHighLevel OAuth login flow
- Extracts Firebase JWT tokens from browser network requests  
- Tests 4 Facebook API endpoints with comprehensive logging
- Handles MFA and login edge cases gracefully
- Provides detailed JSON response analysis
- Attempts to attach unconnected pages via POST API

TROUBLESHOOTING:
===============
If the script fails:
1. Make sure you have internet connection
2. Verify your GHL credentials are correct in the script
3. Try running again (sometimes network issues occur)
4. Check that Playwright is installed: playwright install
5. Approve MFA prompts quickly when they appear

AUTHOR: Claude Code Assistant
VERSION: 1.0 - Complete Facebook Integration Viewer
LAST UPDATED: July 2025
"""

import asyncio
import json
import base64
import time
from datetime import datetime
from typing import Optional
import httpx


class CompleteFacebookViewer:
    """
    Main class that handles the complete Facebook integration testing workflow
    
    This class provides a complete automation solution for business users to:
    - Login to GoHighLevel automatically
    - Extract JWT tokens from browser sessions
    - Test all Facebook API endpoints
    - Display Facebook pages and connection status
    - Attach unconnected pages automatically
    """
    
    def __init__(self):
        # JWT token storage (extracted during browser session)
        self.jwt_token = None
        
        # GHL Location ID (specific to user's account)
        # Nestle LLC - SOMA TEST location
        self.location_id = "lBPqgBowX1CsjHay12LY"
        
        # User credentials for automatic login
        # Using Ovi Colton's credentials (User role)
        self.credentials = {
            'email': 'ovi.chand@gmail.com',
            'password': 'Dummy@123'
        }
    
    def show_welcome(self):
        """Business user welcome screen"""
        print("üöÄ COMPLETE FACEBOOK PAGES VIEWER")
        print("üéØ ONE-CLICK SOLUTION FOR BUSINESS USERS")
        print("=" * 60)
        print("This script will automatically:")
        print("‚úÖ Open fresh incognito browser (no stored login)")
        print("‚úÖ Auto-fill your GHL credentials")
        print("‚úÖ Handle MFA (you approve on mobile if needed)")
        print("‚úÖ Extract access token in background")
        print("‚úÖ Test all Facebook connections")
        print("‚úÖ Show you ALL your Facebook pages")
        print("‚úÖ Show what's connected to GHL")
        print()
        print("üí° Just sit back and let it work!")
        print("üîí Uses incognito mode for fresh login every time")
        print("üì± You may need to approve MFA on your mobile")
        print()
        
        print("üöÄ Starting automatically in 3 seconds...")
        import time
        time.sleep(3)
    
    async def auto_extract_jwt_token(self) -> Optional[str]:
        """Automatically extract JWT token from GHL"""
        
        print(f"\nüîÑ STEP 1: AUTOMATIC LOGIN & TOKEN EXTRACTION")
        print("=" * 55)
        print("üì± Opening browser...")
        print("üîê Handling login automatically...")
        print("üì± If you see MFA, approve it on your mobile")
        print("üîç Extracting your access token...")
        print()
        
        try:
            from playwright.async_api import async_playwright
            
            async with async_playwright() as p:
                # Launch completely fresh browser session
                browser = await p.chromium.launch(
                    headless=False,
                    args=[
                        '--start-maximized',
                        '--incognito',  # Incognito mode
                        '--disable-web-security',  # Allow cross-origin
                        '--disable-features=VizDisplayCompositor',  # Better rendering
                        '--no-first-run',  # Skip first run setup
                        '--disable-default-apps',  # No default apps
                        '--disable-sync'  # No sync with existing profile
                    ]
                )
                
                # Create completely fresh context
                context = await browser.new_context(
                    viewport={'width': 1920, 'height': 1080},
                    storage_state=None,  # No stored state
                    ignore_https_errors=True,  # Ignore SSL issues
                    # Clear all cached data
                    extra_http_headers={
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': '0'
                    }
                )
                page = await context.new_page()
                
                # JWT token capture
                jwt_token = None
                request_count = 0
                
                def handle_request(request):
                    nonlocal jwt_token, request_count
                    request_count += 1
                    
                    # Only capture first JWT token found
                    if not jwt_token:
                        headers = request.headers
                        if 'token-id' in headers and headers['token-id'].startswith('eyJ'):
                            jwt_token = headers['token-id']
                            print(f"   ‚úÖ Access token captured! (Request #{request_count})")
                
                page.on('request', handle_request)
                
                # Navigate to GHL login page directly (force login)
                print("   üåê Opening GoHighLevel login page...")
                await page.goto("https://app.gohighlevel.com/login", wait_until='networkidle')
                
                current_url = page.url
                print(f"   üìç Current page: {current_url}")
                
                # Wait a moment for page to fully load
                await page.wait_for_timeout(2000)
                
                # Force login process (since we're in fresh incognito)
                print("   üîê Fresh incognito session - entering credentials...")
                
                # Check if we can see login form
                try:
                    await page.wait_for_selector('input[type="email"], input[name="email"]', timeout=5000)
                    print("   ‚úÖ Login form detected")
                except:
                    print("   ‚ö†Ô∏è  Login form not found, trying alternative approach...")
                    # Try going to main page and then login
                    await page.goto("https://app.gohighlevel.com/", wait_until='networkidle')
                    await page.wait_for_timeout(2000)
                
                # Perform login
                login_success = await self._auto_login(page)
                
                if login_success:
                    print("   ‚è≥ Waiting for dashboard (you may need to approve MFA)...")
                    try:
                        await self._wait_for_dashboard(page)
                        print("   ‚úÖ Dashboard loaded successfully")
                    except:
                        print("   ‚ö†Ô∏è  Dashboard timeout, but continuing...")
                    
                    print("   üîç Extracting access token...")
                    await self._trigger_requests(page)
                    await page.wait_for_timeout(3000)
                    
                    if not jwt_token:
                        print("   üîÑ Trying additional token extraction methods...")
                        try:
                            await page.reload(wait_until='networkidle')
                            await self._trigger_requests(page)
                            await page.wait_for_timeout(3000)
                        except:
                            print("   ‚ö†Ô∏è  Page reload failed, but may have token already...")
                else:
                    print("   ‚ùå Login failed")
                
                await browser.close()
                
                if jwt_token:
                    print("   üéâ SUCCESS: Access token extracted!")
                    return jwt_token
                else:
                    print("   ‚ùå Could not extract access token")
                    return None
                    
        except ImportError:
            print("   ‚ùå Browser automation not available")
            print("   üí° Please install: pip install playwright")
            return None
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            return None
    
    async def _auto_login(self, page):
        """Handle login automatically with better error handling"""
        
        # Wait for page to be fully loaded
        await page.wait_for_load_state('networkidle')
        
        # Email field
        email_selectors = [
            'input[type="email"]', 
            'input[name="email"]', 
            'input[placeholder*="email" i]',
            '#email'
        ]
        
        email_filled = False
        for selector in email_selectors:
            try:
                await page.wait_for_selector(selector, timeout=5000)
                await page.fill(selector, '')  # Clear any existing content
                await page.fill(selector, self.credentials['email'])
                print("   üìß Email entered successfully")
                email_filled = True
                break
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Email selector {selector} failed: {str(e)[:50]}...")
                continue
        
        if not email_filled:
            print("   ‚ùå Could not find email field")
            return False
        
        # Small delay between fields
        await page.wait_for_timeout(1000)
        
        # Password field
        password_selectors = [
            'input[type="password"]', 
            'input[name="password"]',
            '#password'
        ]
        
        password_filled = False
        for selector in password_selectors:
            try:
                await page.wait_for_selector(selector, timeout=5000)
                await page.fill(selector, '')  # Clear any existing content
                await page.fill(selector, self.credentials['password'])
                print("   üîê Password entered successfully")
                password_filled = True
                break
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Password selector {selector} failed: {str(e)[:50]}...")
                continue
        
        if not password_filled:
            print("   ‚ùå Could not find password field")
            return False
        
        # Small delay before submit
        await page.wait_for_timeout(1000)
        
        # Submit button
        login_selectors = [
            'button[type="submit"]', 
            'button:has-text("Sign In")', 
            'button:has-text("Log In")',
            'button:has-text("Login")',
            'input[type="submit"]',
            '.login-btn',
            '#login-button'
        ]
        
        login_submitted = False
        for selector in login_selectors:
            try:
                await page.wait_for_selector(selector, timeout=5000)
                await page.click(selector)
                print("   üîÑ Login submitted successfully")
                login_submitted = True
                break
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Login selector {selector} failed: {str(e)[:50]}...")
                continue
        
        if not login_submitted:
            print("   ‚ùå Could not find login button")
            return False
        
        return True
    
    async def _wait_for_dashboard(self, page):
        """Wait for dashboard to load"""
        dashboard_indicators = ['text=Dashboard', 'text=Conversations', 'text=Opportunities']
        for indicator in dashboard_indicators:
            try:
                await page.wait_for_selector(indicator, timeout=15000)  # Longer timeout for MFA
                print("   ‚úÖ Dashboard loaded")
                return
            except:
                continue
        await page.wait_for_load_state('networkidle', timeout=15000)
    
    async def _trigger_requests(self, page):
        """Trigger requests to capture JWT token"""
        elements = [
            'text=Dashboard', 'text=Conversations', 'text=Opportunities', 
            'text=Contacts', 'text=Marketing', 'nav a'
        ]
        
        for element in elements:
            try:
                await page.click(element, timeout=2000)
                await page.wait_for_timeout(500)
            except:
                continue
        
        # Also try scrolling and refreshing
        try:
            await page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
            await page.wait_for_timeout(1000)
            await page.reload(wait_until='networkidle')
            await page.wait_for_timeout(2000)
        except:
            pass
    
    def analyze_jwt_token(self, jwt_token: str):
        """Analyze the JWT token"""
        print(f"\nüîç STEP 2: TOKEN ANALYSIS")
        print("=" * 30)
        
        try:
            parts = jwt_token.split('.')
            payload = parts[1] + '=' * (4 - len(parts[1]) % 4)
            decoded = json.loads(base64.b64decode(payload))
            
            exp = decoded.get('exp')
            iat = decoded.get('iat')
            now = datetime.now().timestamp()
            
            print(f"‚úÖ Token Details:")
            print(f"   üë§ User ID: {decoded.get('user_id')}")
            print(f"   üè¢ Company ID: {decoded.get('company_id')}")
            print(f"   üìç Locations: {len(decoded.get('locations', []))} available")
            print(f"   ‚è∞ Issued: {datetime.fromtimestamp(iat)}")
            print(f"   ‚è∞ Expires: {datetime.fromtimestamp(exp)}")
            print(f"   ‚è∞ Valid for: {(exp - iat) / 3600:.1f} hours")
            print(f"   ‚úÖ Status: {'VALID' if now < exp else 'EXPIRED'}")
            
            if now >= exp:
                print("‚ùå Token expired - this shouldn't happen with fresh extraction!")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error analyzing token: {e}")
            return False
    
    async def test_all_facebook_endpoints(self, jwt_token: str):
        """Test all Facebook endpoints and show results with detailed logging"""
        
        print(f"\nüì± STEP 3: COMPREHENSIVE FACEBOOK INTEGRATION TEST")
        print("=" * 55)
        print("Testing all your Facebook connections with detailed logging...")
        print()
        
        headers = {
            "token-id": jwt_token,
            "channel": "APP",
            "source": "WEB_USER",
            "version": "2021-07-28",
            "accept": "application/json",
            "content-type": "application/json"
        }
        
        print(f"üîß Request Headers Configuration:")
        print(f"   üìã Token ID: {jwt_token[:30]}...{jwt_token[-10:]}")
        print(f"   üìã Channel: {headers['channel']}")
        print(f"   üìã Source: {headers['source']}")
        print(f"   üìã Version: {headers['version']}")
        print(f"   üìã Location ID: {self.location_id}")
        print()
        
        # Test endpoints in logical order
        endpoints = [
            {
                "name": "Facebook Connection Status",
                "method": "GET",
                "url": f"https://backend.leadconnectorhq.com/integrations/facebook/{self.location_id}/connection",
                "description": "Check if Facebook is connected to GHL"
            },
            {
                "name": "All Available Facebook Pages",
                "method": "GET",
                "url": f"https://backend.leadconnectorhq.com/integrations/facebook/{self.location_id}/allPages?limit=20",
                "description": "Get all Facebook pages from your Facebook account"
            }
        ]
        
        results = {}
        
        all_available_pages = []  # Store for potential attachment
        
        for i, endpoint in enumerate(endpoints, 1):
            print(f"üì° TEST {i}: {endpoint['name'].upper()}")
            print(f"   üìù Purpose: {endpoint['description']}")
            print(f"   üåê Method: {endpoint['method']}")
            print(f"   üîó URL: {endpoint['url']}")
            print(f"   ‚è≥ Sending request...", end="", flush=True)
            
            try:
                async with httpx.AsyncClient(timeout=30.0) as client:
                    if endpoint['method'] == 'GET':
                        response = await client.get(endpoint['url'], headers=headers)
                    else:
                        response = await client.post(endpoint['url'], headers=headers)
                
                print(f" Status: {response.status_code}")
                print(f"   üìä Response Time: ~{response.elapsed.total_seconds():.2f}s")
                print(f"   üìè Content Length: {len(response.content)} bytes")
                
                if response.status_code == 200:
                    print(f"   ‚úÖ SUCCESS")
                    
                    try:
                        data = response.json()
                        results[endpoint['name']] = {
                            'success': True,
                            'data': data,
                            'response_size': len(response.content),
                            'response_time': response.elapsed.total_seconds()
                        }
                        
                        print(f"   üìã Raw JSON Response:")
                        print(f"      {json.dumps(data, indent=6)}")
                        
                        # Detailed analysis for each endpoint
                        if 'connection' in endpoint['url'].lower():
                            print(f"\n   üîç CONNECTION ANALYSIS:")
                            connected = data.get('connected', False)
                            print(f"      üîó Status: {'‚úÖ CONNECTED' if connected else '‚ùå NOT CONNECTED'}")
                            
                            if connected and isinstance(data, dict):
                                print(f"      üìä Connection Details:")
                                for key, value in data.items():
                                    if key != 'connected':
                                        print(f"         {key}: {value}")
                        
                        elif 'allPages' in endpoint['url']:
                            print(f"\n   üîç ALL AVAILABLE PAGES ANALYSIS:")
                            pages = data.get('pages', data) if isinstance(data, dict) else data
                            
                            if isinstance(pages, list):
                                all_available_pages = pages  # Store for potential attachment
                                print(f"      üìÑ Total Pages Found: {len(pages)}")
                                
                                if len(pages) > 0:
                                    print(f"      üìã DETAILED PAGE INFORMATION:")
                                    for j, page in enumerate(pages, 1):
                                        print(f"         PAGE {j}:")
                                        for key, value in page.items():
                                            print(f"            {key}: {value}")
                                        print()
                                else:
                                    print(f"      üìÑ No Facebook pages found in your account")
                            else:
                                print(f"      ‚ö†Ô∏è  Unexpected data format: {type(pages)}")
                        
                        elif 'pages?getAll' in endpoint['url']:
                            print(f"\n   üîç CONNECTED PAGES ANALYSIS:")
                            pages = data.get('pages', data) if isinstance(data, dict) else data
                            
                            if isinstance(pages, list):
                                print(f"      üîó Pages Connected to GHL: {len(pages)}")
                                
                                if len(pages) > 0:
                                    print(f"      üìã CONNECTED PAGES DETAILS:")
                                    for j, page in enumerate(pages, 1):
                                        print(f"         CONNECTED PAGE {j}:")
                                        for key, value in page.items():
                                            print(f"            {key}: {value}")
                                        print()
                                else:
                                    print(f"      üìÑ No pages currently connected to GHL")
                                    print(f"      üí° Available for connection below...")
                            else:
                                print(f"      ‚ö†Ô∏è  Unexpected data format: {type(pages)}")
                    
                    except json.JSONDecodeError:
                        print(f"   üìÑ Non-JSON response received")
                        print(f"   üìã Raw content: {response.text[:500]}...")
                        results[endpoint['name']] = {'success': True, 'raw': True}
                
                else:
                    print(f"‚ùå FAILED ({response.status_code})")
                    print(f"      Error: {response.text[:100]}...")
                    results[endpoint['name']] = {
                        'success': False,
                        'error': response.status_code
                    }
            
            except Exception as e:
                print(f"üí• ERROR: {str(e)[:100]}...")
                results[endpoint['name']] = {
                    'success': False,
                    'error': str(e)
                }
            
            print()  # Add spacing between tests
        
        # Test 3: Attach Facebook pages to GHL
        print(f"üì° TEST 3: ATTACH FACEBOOK PAGES TO GHL")
        print(f"   üìù Purpose: Connect Facebook pages to your GHL location")
        print(f"   üåê Method: POST")
        
        if all_available_pages:
            attach_url = f"https://backend.leadconnectorhq.com/integrations/facebook/{self.location_id}/pages"
            
            # Prepare the payload from your network capture
            pages_to_attach = []
            for page in all_available_pages:
                pages_to_attach.append({
                    "facebookPageId": page.get("facebookPageId"),
                    "facebookPageName": page.get("facebookPageName"),
                    "facebookIgnoreMessages": page.get("facebookIgnoreMessages", False),
                    "isInstagramAvailable": page.get("isInstagramAvailable", False)
                })
            
            attach_payload = {"pages": pages_to_attach}
            
            print(f"   üîó URL: {attach_url}")
            print(f"   üìã Payload: {json.dumps(attach_payload, indent=6)}")
            print(f"   ‚è≥ Sending POST request to attach pages...", end="", flush=True)
            
            try:
                async with httpx.AsyncClient(timeout=30.0) as client:
                    response = await client.post(
                        attach_url,
                        headers=headers,
                        json=attach_payload
                    )
                
                print(f" Status: {response.status_code}")
                print(f"   üìä Response Time: ~{response.elapsed.total_seconds():.2f}s")
                print(f"   üìè Content Length: {len(response.content)} bytes")
                
                if response.status_code in [200, 201]:
                    print(f"   ‚úÖ ATTACHMENT SUCCESS")
                    
                    try:
                        data = response.json()
                        results["Attach Facebook Pages"] = {
                            'success': True,
                            'data': data,
                            'response_size': len(response.content),
                            'response_time': response.elapsed.total_seconds()
                        }
                        
                        print(f"   üìã Attachment Response:")
                        print(f"      {json.dumps(data, indent=6)}")
                        
                        print(f"\n   üéâ PAGES SUCCESSFULLY ATTACHED TO GHL!")
                        print(f"   üí° Your Facebook pages are now connected for marketing")
                        
                    except json.JSONDecodeError:
                        print(f"   üìÑ Non-JSON response: {response.text[:200]}...")
                        results["Attach Facebook Pages"] = {'success': True, 'raw': True}
                
                else:
                    print(f"   ‚ùå ATTACHMENT FAILED ({response.status_code})")
                    print(f"   üìã Error Response: {response.text[:200]}...")
                    results["Attach Facebook Pages"] = {
                        'success': False,
                        'error': response.status_code,
                        'message': response.text
                    }
                    
            except Exception as e:
                print(f"   üí• ERROR: {str(e)[:100]}...")
                results["Attach Facebook Pages"] = {
                    'success': False,
                    'error': str(e)
                }
        else:
            print(f"   ‚ö†Ô∏è  No Facebook pages available to attach")
            results["Attach Facebook Pages"] = {
                'success': False,
                'error': 'No pages available'
            }
        
        print()
        
        # Test 4: Verify pages are now connected
        print(f"üì° TEST 4: VERIFY PAGES ARE NOW CONNECTED")
        print(f"   üìù Purpose: Confirm pages were successfully attached to GHL")
        print(f"   üåê Method: GET")
        verify_url = f"https://backend.leadconnectorhq.com/integrations/facebook/{self.location_id}/pages?getAll=true"
        print(f"   üîó URL: {verify_url}")
        print(f"   ‚è≥ Sending request to verify attachment...", end="", flush=True)
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(verify_url, headers=headers)
            
            print(f" Status: {response.status_code}")
            print(f"   üìä Response Time: ~{response.elapsed.total_seconds():.2f}s")
            print(f"   üìè Content Length: {len(response.content)} bytes")
            
            if response.status_code == 200:
                print(f"   ‚úÖ SUCCESS")
                
                try:
                    data = response.json()
                    results["Verify Connected Pages"] = {
                        'success': True,
                        'data': data,
                        'response_size': len(response.content),
                        'response_time': response.elapsed.total_seconds()
                    }
                    
                    print(f"   üìã Raw JSON Response:")
                    print(f"      {json.dumps(data, indent=6)}")
                    
                    print(f"\n   üîç CONNECTED PAGES VERIFICATION:")
                    pages = data.get('pages', data) if isinstance(data, dict) else data
                    
                    if isinstance(pages, list):
                        print(f"      üîó Total Pages Connected to GHL: {len(pages)}")
                        
                        if len(pages) > 0:
                            print(f"      ‚úÖ PAGES NOW CONNECTED:")
                            for j, page in enumerate(pages, 1):
                                print(f"         PAGE {j}:")
                                for key, value in page.items():
                                    print(f"            {key}: {value}")
                                print()
                            print(f"      üéâ Facebook integration complete!")
                        else:
                            print(f"      ‚ùå No pages showing as connected")
                            print(f"      üí° Check GHL dashboard or try again")
                    else:
                        print(f"      ‚ö†Ô∏è  Unexpected data format: {type(pages)}")
                
                except json.JSONDecodeError:
                    print(f"   üìÑ Non-JSON response: {response.text[:500]}...")
                    results["Verify Connected Pages"] = {'success': True, 'raw': True}
            
            else:
                print(f"   ‚ùå VERIFICATION FAILED ({response.status_code})")
                print(f"      Error: {response.text[:100]}...")
                results["Verify Connected Pages"] = {
                    'success': False,
                    'error': response.status_code
                }
                
        except Exception as e:
            print(f"   üí• ERROR: {str(e)[:100]}...")
            results["Verify Connected Pages"] = {
                'success': False,
                'error': str(e)
            }
        
        print()
        
        return results
    
    
    def show_final_summary(self, results: dict):
        """Show business user friendly summary"""
        
        print(f"\nüéØ FINAL SUMMARY FOR YOU")
        print("=" * 40)
        
        successful_tests = sum(1 for r in results.values() if r.get('success'))
        total_tests = len(results)
        
        print(f"üìä Test Results: {successful_tests}/{total_tests} successful ({(successful_tests/total_tests)*100:.1f}%)")
        print()
        
        for name, result in results.items():
            status = "‚úÖ" if result.get('success') else "‚ùå"
            print(f"{status} {name}")
        
        print()
        
        if successful_tests == total_tests:
            print(f"üéâ CONGRATULATIONS!")
            print(f"‚úÖ Your Facebook integration is working perfectly")
            print(f"‚úÖ All endpoints are accessible")
            print(f"‚úÖ You can see all your Facebook pages")
            
            print(f"\nüí° What you can do now:")
            print(f"   ‚Ä¢ View all your Facebook pages above")
            print(f"   ‚Ä¢ Connect more pages in GHL dashboard if needed")
            print(f"   ‚Ä¢ Use Facebook pages for marketing campaigns")
            print(f"   ‚Ä¢ Run this script anytime to check status")
            
        elif successful_tests > 0:
            print(f"‚ö†Ô∏è  PARTIAL SUCCESS")
            print(f"‚úÖ Some parts of your Facebook integration work")
            print(f"‚ùå Some tests failed - check Facebook connection in GHL")
            
        else:
            print(f"‚ùå INTEGRATION ISSUES")
            print(f"üí° Possible solutions:")
            print(f"   ‚Ä¢ Check Facebook connection in GHL dashboard")
            print(f"   ‚Ä¢ Reconnect Facebook OAuth if needed")
            print(f"   ‚Ä¢ Contact support if issues persist")
        
        print(f"\nüöÄ ONE-CLICK SOLUTION COMPLETE!")
        print(f"üì± Bookmark this script for easy Facebook page checking")


async def main():
    """One script that does everything automatically"""
    
    viewer = CompleteFacebookViewer()
    
    # Step 1: Welcome & Instructions
    viewer.show_welcome()
    
    # Step 2: Auto extract JWT token
    jwt_token = await viewer.auto_extract_jwt_token()
    
    if not jwt_token:
        print("\n‚ùå Could not extract access token automatically")
        print("üí° Please ensure you're logged into GHL or try again")
        return
    
    # Step 3: Analyze token
    if not viewer.analyze_jwt_token(jwt_token):
        print("\n‚ùå Token analysis failed")
        return
    
    # Step 4: Test all Facebook endpoints
    results = await viewer.test_all_facebook_endpoints(jwt_token)
    
    # Step 5: Show business user summary
    viewer.show_final_summary(results)
    
    print(f"\nüéâ ALL DONE!")
    print(f"Thank you for using the Complete Facebook Pages Viewer!")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        print("üí° Please try again or contact support")