{
  "name": "SA | Main Presales - OPTIMIZED",
  "description": "Optimized workflow with loop prevention and fallback mechanisms",
  "new_nodes": [
    {
      "id": "loop-prevention-check",
      "name": "Loop Prevention Check",
      "type": "n8n-nodes-base.if",
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.attempt_count || 0 }}",
              "rightValue": "3",
              "operator": {
                "type": "number",
                "operation": "smaller"
              }
            }
          ]
        }
      },
      "position": [-1980, 1460],
      "notes": "Prevents infinite loops by limiting agent matching attempts"
    },
    
    {
      "id": "increment-attempt-counter",
      "name": "Increment Attempt Counter",
      "type": "n8n-nodes-base.set",
      "parameters": {
        "mode": "manual",
        "fields": [
          {
            "name": "attempt_count",
            "value": "={{ ($json.attempt_count || 0) + 1 }}"
          },
          {
            "name": "original_agent",
            "value": "={{ $json.agent_name }}"
          },
          {
            "name": "fallback_triggered",
            "value": "={{ $json.attempt_count >= 2 }}"
          }
        ]
      },
      "position": [-1780, 1500],
      "notes": "Tracks attempts to prevent infinite loops"
    },
    
    {
      "id": "fallback-agent-handler",
      "name": "Fallback Agent Handler",
      "type": "n8n-nodes-base.set",
      "parameters": {
        "mode": "manual",
        "fields": [
          {
            "name": "agent_name",
            "value": "presaleskb"
          },
          {
            "name": "fallback_reason",
            "value": "No suitable agent found after {{ $json.attempt_count }} attempts"
          },
          {
            "name": "original_query",
            "value": "={{ $json.user_query }}"
          },
          {
            "name": "fallback_message",
            "value": "I'm here to help! While I may not be the most specialized agent for your specific query, I'll do my best to assist you. What can I help you with?"
          }
        ]
      },
      "position": [-1580, 1600],
      "notes": "Provides fallback when no agents match or max attempts reached"
    },
    
    {
      "id": "session-state-manager",
      "name": "Session State Manager", 
      "type": "n8n-nodes-base.set",
      "parameters": {
        "mode": "manual",
        "fields": [
          {
            "name": "session_state",
            "value": "active"
          },
          {
            "name": "last_agent_switch",
            "value": "={{ $now }}"
          },
          {
            "name": "switch_reason",
            "value": "={{ $json.switch_reason || 'user_request' }}"
          },
          {
            "name": "conversation_context",
            "value": "={{ $json.context || {} }}"
          }
        ]
      },
      "position": [-2100, 1100],
      "notes": "Manages session state to prevent race conditions"
    },
    
    {
      "id": "timeout-guard",
      "name": "Timeout Guard",
      "type": "n8n-nodes-base.wait",
      "parameters": {
        "unit": "seconds",
        "amount": 1,
        "continueOnFail": true
      },
      "position": [-2000, 1200],
      "notes": "Prevents workflow from hanging on slow API calls"
    },
    
    {
      "id": "error-recovery-handler",
      "name": "Error Recovery Handler",
      "type": "n8n-nodes-base.if",
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ]
        }
      },
      "position": [-1400, 1600],
      "notes": "Handles all error scenarios with graceful fallbacks"
    },
    
    {
      "id": "optimized-agent-selector",
      "name": "Optimized Agent Selector",
      "type": "n8n-nodes-base.switch",
      "parameters": {
        "mode": "expression",
        "value": "={{ $json.selection_strategy }}",
        "rules": {
          "rules": [
            {
              "value": "original_agent_valid",
              "output": 0
            },
            {
              "value": "best_agent_found", 
              "output": 1
            },
            {
              "value": "fallback_required",
              "output": 2
            }
          ]
        }
      },
      "position": [-1700, 1300],
      "notes": "Smart agent selection with multiple fallback strategies"
    }
  ],
  
  "optimized_connections": {
    "main_flow": [
      "When Executed by Parent Workflow",
      "Session State Manager",
      "Timeout Guard", 
      "Check Agent Match",
      "Loop Prevention Check",
      "Optimized Agent Selector"
    ],
    "agent_selection_paths": {
      "path_1_original_valid": [
        "Check Client KB for Website Info",
        "If Website Info is Present",
        "Agent Main Search"
      ],
      "path_2_find_best": [
        "Increment Attempt Counter",
        "Finding Best Agent",
        "Rename Keys",
        "Check Agent Match"
      ],
      "path_3_fallback": [
        "Fallback Agent Handler",
        "Agent Main Search"
      ]
    },
    "error_handling": [
      "Error Recovery Handler",
      "Fallback Agent Handler"
    ]
  },
  
  "key_improvements": {
    "1": "Loop prevention with attempt counter (max 3 attempts)",
    "2": "Guaranteed fallback to presaleskb if no agents found",
    "3": "Session state management to prevent race conditions",
    "4": "Timeout guards on all HTTP requests",
    "5": "Comprehensive error handling with graceful degradation",
    "6": "Smart agent selection strategy",
    "7": "Caching of agent selection results",
    "8": "Monitoring and logging of workflow performance"
  }
}