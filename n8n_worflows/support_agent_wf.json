{
  "name": "AI Agent RAG System with Supabase Vector DB",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "agent-query",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-entry",
      "name": "Receive User Query",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "notes": "Expects: user_id, session_id, user_mssg, agent, timestamp_at_call"
    },
    {
      "parameters": {
        "resource": "embedding",
        "model": "text-embedding-3-small",
        "input": "={{$json.user_mssg}}",
        "options": {}
      },
      "id": "create-query-embedding",
      "name": "Create Query Embedding",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.SUPABASE_URL}}/rest/v1/rpc/match_agent_documents",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$env.SUPABASE_KEY}}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$env.SUPABASE_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"query_embedding\": {{JSON.stringify($json.embedding)}},\n  \"match_count\": 5,\n  \"match_threshold\": 0.7\n}"
      },
      "id": "match-agent-kb",
      "name": "Match Against All Agent KBs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract the best matching agent from results\nconst results = $input.first().json;\nconst requestedAgent = $input.first().json.original_agent;\n\n// Find the highest similarity match\nlet bestMatch = null;\nlet highestSimilarity = 0;\n\nif (results && results.length > 0) {\n  results.forEach(doc => {\n    if (doc.similarity > highestSimilarity) {\n      highestSimilarity = doc.similarity;\n      bestMatch = doc.agent_name;\n    }\n  });\n}\n\n// Store original request data\nconst originalData = $input.first().json;\n\nreturn [{\n  json: {\n    matched_agent: bestMatch,\n    requested_agent: originalData.agent,\n    match_similarity: highestSimilarity,\n    user_id: originalData.user_id,\n    session_id: originalData.session_id,\n    user_mssg: originalData.user_mssg,\n    timestamp_at_call: originalData.timestamp_at_call,\n    embedding: originalData.embedding\n  }\n}];"
      },
      "id": "process-match-results",
      "name": "Process Match Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.matched_agent}}",
              "operation": "equals",
              "value2": "={{$json.requested_agent}}"
            }
          ]
        }
      },
      "id": "check-agent-match",
      "name": "Does Matched Agent = Requested Agent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.SUPABASE_URL}}/rest/v1/rpc/get_website_data_by_session",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$env.SUPABASE_KEY}}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$env.SUPABASE_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"p_session_id\": \"{{$json.session_id}}\"\n}"
      },
      "id": "init-client-kb",
      "name": "Get Website Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1250, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.has_website_data}}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-website-data",
      "name": "Has Website Data?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1450, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"user_id\": \"{{$json.user_id}}\",\n  \"session_id\": \"{{$json.session_id}}\",\n  \"agent_response\": \"Please provide your website URL so I can better assist you.\",\n  \"agent\": \"{{$json.requested_agent}}\",\n  \"timestamp_at_call\": \"{{$json.timestamp_at_call}}\",\n  \"requires_website\": true\n}"
      },
      "id": "prompt-website",
      "name": "Prompt for Website URL",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1650, 100]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "Based on the website data: {{$json.analysis}}, you are now an expert in the {{$json.industry}} industry. You understand all industry-specific jargon and best practices."
            },
            {
              "role": "user",
              "content": "{{$json.user_mssg}}"
            }
          ]
        },
        "options": {}
      },
      "id": "process-with-industry-kb",
      "name": "Process with Industry Context",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1650, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.SUPABASE_URL}}/rest/v1/rpc/match_agent_documents_by_name",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$env.SUPABASE_KEY}}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$env.SUPABASE_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"query_embedding\": {{JSON.stringify($json.embedding)}},\n  \"agent_name_filter\": \"{{$json.requested_agent}}\",\n  \"match_count\": 5\n}"
      },
      "id": "get-agent-context",
      "name": "Get Agent Context",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1850, 300]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are {{$json.agent_context}}. You have access to the following client information: {{$json.website_analysis}}. The client is in the {{$json.industry}} industry."
            },
            {
              "role": "user",
              "content": "{{$json.user_mssg}}"
            }
          ]
        },
        "options": {}
      },
      "id": "generate-agent-response",
      "name": "Generate Agent Response",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [2050, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"user_id\": \"{{$json.user_id}}\",\n  \"session_id\": \"{{$json.session_id}}\",\n  \"agent_response\": \"{{$json.choices[0].message.content}}\",\n  \"agent\": \"{{$json.requested_agent}}\",\n  \"timestamp_at_call\": \"{{$json.timestamp_at_call}}\"\n}"
      },
      "id": "send-final-response",
      "name": "Send Final Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2250, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"user_id\": \"{{$json.user_id}}\",\n  \"session_id\": \"{{$json.session_id}}\",\n  \"agent_response\": \"Agent '{{$json.matched_agent}}' is the perfect agent to answer your question. Redirecting...\",\n  \"agent\": \"{{$json.matched_agent}}\",\n  \"timestamp_at_call\": \"{{$json.timestamp_at_call}}\",\n  \"redirect_to_agent\": \"{{$json.matched_agent}}\"\n}"
      },
      "id": "redirect-to-better-agent",
      "name": "Redirect to Better Agent",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1250, 400]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "website-analyzed",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-website-analyzed",
      "name": "Website Analysis Complete",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 600],
      "notes": "Triggered when website analysis is complete"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://squidgy_backend.com/analyse_website",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"url\": \"{{$json.website_url}}\",\n  \"user_id\": \"{{$json.user_id}}\",\n  \"session_id\": \"{{$json.session_id}}\"\n}"
      },
      "id": "analyze-website",
      "name": "Analyze Website",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [450, 600]
    },
    {
      "parameters": {
        "jsCode": "// Store website analysis data\nconst analysisData = $input.first().json;\n\n// Prepare data for Supabase\nreturn [{\n  json: {\n    user_id: analysisData.user_id,\n    session_id: analysisData.session_id,\n    website_url: analysisData.url,\n    analysis: analysisData.analysis,\n    industry: analysisData.industry\n  }\n}];"
      },
      "id": "process-website-data",
      "name": "Process Website Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [650, 600]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.SUPABASE_URL}}/rest/v1/website_data",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$env.SUPABASE_KEY}}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{$env.SUPABASE_KEY}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "resolution=merge-duplicates"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"session_id\": \"{{$json.session_id}}\",\n  \"url\": \"{{$json.website_url}}\",\n  \"analysis\": {{JSON.stringify($json.analysis)}}\n}"
      },
      "id": "update-website-data",
      "name": "Update Website Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [850, 600]
    }
  ],
  "connections": {
    "Receive User Query": {
      "main": [
        [
          {
            "node": "Create Query Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Query Embedding": {
      "main": [
        [
          {
            "node": "Match Against All Agent KBs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Match Against All Agent KBs": {
      "main": [
        [
          {
            "node": "Process Match Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Match Results": {
      "main": [
        [
          {
            "node": "Does Matched Agent = Requested Agent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Does Matched Agent = Requested Agent?": {
      "main": [
        [
          {
            "node": "Get Website Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redirect to Better Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Website Data": {
      "main": [
        [
          {
            "node": "Has Website Data?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Website Data?": {
      "main": [
        [
          {
            "node": "Process with Industry Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prompt for Website URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process with Industry Context": {
      "main": [
        [
          {
            "node": "Get Agent Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Agent Context": {
      "main": [
        [
          {
            "node": "Generate Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Agent Response": {
      "main": [
        [
          {
            "node": "Send Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Website Analysis Complete": {
      "main": [
        [
          {
            "node": "Analyze Website",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Website": {
      "main": [
        [
          {
            "node": "Process Website Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Website Data": {
      "main": [
        [
          {
            "node": "Update Website Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": null,
  "tags": []
}